# 全局设备设置
device: 'cuda'
# 实验配置信息
experiment_info:
  author: Benchmark Team
  date: '2025-09-24'
  description: 多模型多数据集对比实验框架
  version: '2.0'

# 数据集定义 - 支持多个数据集
datasets:
  NASA_IMS:
    train_data: ./data/NASA_IMS/train_X.npy
    train_label: ./data/NASA_IMS/train_y.npy
    test_data: ./data/NASA_IMS/test_X.npy
    test_label: ./data/NASA_IMS/test_y.npy
    preprocessing:
      normalize: false  

  NPY_UCI_HAR:
    train_data: ./data/NPY_UCI_HAR/train_X.npy
    train_label: ./data/NPY_UCI_HAR/train_y.npy
    test_data: ./data/NPY_UCI_HAR/test_X.npy
    test_label: ./data/NPY_UCI_HAR/test_y.npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}
        
        - name: "add_noise"
          file: "noise_processors"
          function: "add_gaussian_noise"
          params: 
            noise_level: 0.01
        
        - name: "remove_outliers"
          file: "noise_processors"
          function: "remove_outliers"
          params:
            threshold: 3.0
        
        - name: "feature_engineering"
          file: "feature_engineering"
          function: "add_statistical_features"
          params: {}

  UCR2018_npy:
    collection_path: ./data/UCR2018_npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}


# 模型定义 - 支持多个模型
models:
  LSTM:
    module: models/LSTM    # 清晰的相对路径
    class: LSTM2one        # 使用分类模型
    hidden_dim: 64
    num_layers: 2
    dropout: 0.2

  CNN:
    module: models/CNN     # 清晰的相对路径
    class: CNN2one         # 使用分类模型
    num_filters: 64
    filter_sizes: [3, 5, 7]
    num_layers: 3
    dropout: 0.2

  PatchTST:
    module: models/PatchTST/PatchTST_supervised/models/PatchTST_cls
    class: PatchTSTClassifier
    patch_len: "{4, 16, 64}"
    stride: 8
    d_model: 64
    n_heads: 8
    n_layers: 3
    d_ff: 256
    dropout: 0.1
    pooling: attention
    mlp_layers: 2
    mlp_hidden: 128
    mlp_dropout: 0.2

# 训练参数模板 - 支持多种训练方式
training_templates:
  classification_normal:
    type: classification  # 分类任务训练
    batch_size: 64
    epochs: 50
    lr: 0.001
    patience: 8
    optimizer: 'adam'
    print_interval: 5
    data_fraction: 1.0  # 只使用1%的数据集，用于快速测试
    validation_split: 0.2
    logging_level: 'minimal'
    epochinfo: 'nothing'
  
  classification_normal_fast:
    type: classification  # 分类任务训练
    batch_size: 64
    epochs: 50
    lr: 0.001
    patience: 8
    optimizer: 'adam'
    print_interval: 5
    data_fraction: 0.01  # 只使用1%的数据集，用于快速测试
    validation_split: 0.2
    logging_level: 'minimal'
    epochinfo: 'nothing'

  classification_batch:
    type: classification  # 分类任务训练
    batch_size: 64
    epochs: 100
    lr: "{0.001, 0.0001}"
    patience: 10
    optimizer: 'adam'
    print_interval: 1
    data_fraction: 1.0 
    validation_split: 0.2
    logging_level: 'minimal'
    epochinfo: 'with_metrics'

experiments:
  # - name: "LSTM_NASA_IMS_classification_debug"
  #   model: "LSTM"
  #   dataset: "NASA_IMS"
  #   training: "classification_normal_fast"
  #   evaluation: "default"
    
  # - name: "CNN_NASA_IMS_classification_debug"
  #   model: "CNN"
  #   dataset: "NASA_IMS"
  #   training: "classification_normal_fast"
  #   evaluation: "default"

  # - name: "LSTM_NPY_UCI_HAR_classification_fast"
  #   model: "LSTM"
  #   dataset: "NPY_UCI_HAR"
  #   training: "classification_normal"
  #   evaluation: "default"
    
  # - name: "CNN_NPY_UCI_HAR_classification_fast"
  #   model: "CNN"
  #   dataset: "NPY_UCI_HAR"
  #   training: "classification_normal"
  #   evaluation: "default"

  # - name: "PatchTST_NASA_IMS_classification"
  #   model: "PatchTST"
  #   dataset: "NASA_IMS"
  #   training: "classification_normal_fast"
  #   evaluation: "default"

  # - name: "PatchTST_NPY_UCI_HAR_classification"
  #   model: "PatchTST"
  #   dataset: "NPY_UCI_HAR"
  #   training: "classification_normal"
  #   evaluation: "default"

  - name: "LSTM"
    model: "LSTM"
    dataset_collection: "UCR2018_npy"
    training: "classification_batch"
    evaluation: "default"

  - name: "CNN"
    model: "CNN"
    dataset_collection: "UCR2018_npy"
    training: "classification_batch"
    evaluation: "default"

  - name: "PatchTST"
    model: "PatchTST"
    dataset_collection: "UCR2018_npy"
    training: "classification_batch"
    evaluation: "default"


# Epoch信息打印配置模板
epochinfo_templates:
  nothing:
    format: 'default'  # 只显示基本的epoch信息（训练损失、验证损失）
  with_metrics:
    evaluation: 'ACC'  # 使用evaluation_templates中的ACC模板计算指标

# 评估配置模板
evaluation_templates:
  default:
    metrics:
      f1:
        # 默认：evaluators/f1.py 的 evaluate 函数
      precision:
        file: sklearn_metrics  # 使用 sklearn_metrics.py
        function: precision_evaluate  # 调用 precision_evaluate 函数
      recall:
        file: sklearn_metrics
        function: recall_evaluate
      accuracy:
        file: sklearn_metrics
        function: accuracy_evaluate
      train_test_gap:
        file: sklearn_metrics
        function: train_test_gap_evaluate
      test_samples:
        file: plot_label_distribution  # 使用 plot_label_distribution.py
        function: evaluate  # 会生成标签分布图

  ACC:
    metrics:
      accuracy:
        file: sklearn_metrics
        function: accuracy_evaluate
