# 全局设备设置
device: 'cuda'
# 实验配置信息
experiment_info:
  author: Benchmark Team
  date: '2025-09-24'
  description: 多模型多数据集对比实验框架
  version: '2.0'

# 数据集定义 - 支持多个数据集
datasets:
  NASA_IMS:
    train_data: ./data/NASA_IMS/train_X.npy
    train_label: ./data/NASA_IMS/train_y.npy
    test_data: ./data/NASA_IMS/test_X.npy
    test_label: ./data/NASA_IMS/test_y.npy
    preprocessing:
      normalize: false  

  UCR2018_npy:
    collection_path: ./data/UCR2018_npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}
  
  MYDATA:
    collection_path: ./data/MYDATA
    preprocessing:
      normalize: false

  NPY_UCI_HAR:
    train_data: ./data/NPY_UCI_HAR/train_X.npy
    train_label: ./data/NPY_UCI_HAR/train_y.npy
    test_data: ./data/NPY_UCI_HAR/test_X.npy
    test_label: ./data/NPY_UCI_HAR/test_y.npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}
        
        - name: "add_noise"
          file: "noise_processors"
          function: "add_gaussian_noise"
          params: 
            noise_level: 0.01
        
        - name: "remove_outliers"
          file: "noise_processors"
          function: "remove_outliers"
          params:
            threshold: 3.0
        
        - name: "feature_engineering"
          file: "feature_engineering"
          function: "add_statistical_features"
          params: {}
  


# 模型定义 - 支持多个模型
models:
  LSTM:
    module: models/LSTM    # 清晰的相对路径
    class: LSTM2one        # 使用分类模型
    hidden_dim: 64
    num_layers: 2
    dropout: 0.2

  CNN:
    module: models/CNN     # 清晰的相对路径
    class: CNN2one         # 使用分类模型
    num_filters: 64
    filter_sizes: [3, 5, 7]
    num_layers: 3
    dropout: 0.2
  
  # GRU:
  #   hidden_dim: 128
  #   num_layers: 3
  #   dropout: 0.1

# 训练参数模板 - 支持多种训练方式
training_templates:
  supervised_default:
    type: supervised  # 监督学习训练
    batch_size: 64     # 恢复正常batch_size，验证器已修复OOM问题
    epochs: 100
    lr: 0.001
    patience: 10
    optimizer: 'adam'
    print_interval: 5  # 每10轮打印一次训练信息
    data_fraction: 1.0  # 使用100%的数据集（默认值）
    validation_split: 0.2  # 从训练集中划分20%作为验证集
    logging_level: 'minimal'  # minimal: 只显示epoch信息 | normal: +重要事件 | verbose: 显示所有
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'
  
  supervised_fast:
    type: supervised
    batch_size: 64
    epochs: 10
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印（用于快速调试）
    data_fraction: 0.01  # 只使用10%的数据集，用于快速测试流程
    validation_split: 0.2  # 从训练集中划分20%作为验证集
    logging_level: 'verbose'  # 调试模式显示所有信息
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'
  
  supervised_debug:
    type: supervised
    batch_size: 64
    epochs: 3
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印
    data_fraction: 0.01  # 使用10%的数据集，避免数据太少
    validation_split: 0.1  # 减少验证集比例到10%
    logging_level: 'verbose'  # 调试模式显示所有信息
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'  
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'

  supervised_debug_full_dataset:
    type: supervised
    batch_size: 32
    epochs: 200
    lr: 0.0001
    patience: 5
    optimizer: 'adam'
    print_interval: 5   
    data_fraction: 1.0  # 修复：使用100%数据集
    validation_split: 0.2
    logging_level: 'minimal'  # 调试模式显示所有信息
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'

  supervised_complete:
    type: supervised
    batch_size: 32  # 减小batch_size适应小数据集
    epochs: 100     # 增加训练轮数
    lr: 0.0001      # 降低学习率
    patience: 10    # 增加patience
    optimizer: 'adam'
    print_interval: 1   
    data_fraction: 1.0  # 使用100%的数据集
    validation_split: 0.2  
    logging_level: 'verbose'  
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'
  
  supervised_debug_with_metrics:
    type: supervised
    batch_size: 64
    epochs: 3
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印
    data_fraction: 0.01  # 只使用1%的数据集，用于超快速调试
    validation_split: 0.2  # 从训练集中划分20%作为验证集
    logging_level: 'normal'  # 显示重要事件但不过度冗余
    # 与训练器严格对齐：显式训练期评估与监控
    epochinfo: 'train_acc'
    monitor:
      metric: 'accuracy'
      mode: 'max'
      split: 'val'
  
  # self_supervised:
  #   type: self_supervised  # 自监督学习训练
  #   batch_size: 64
  #   epochs: 200
  #   lr: 0.0001
  #   mask_ratio: 0.15
  #   contrastive_temperature: 0.07
  #   optimizer: 'adam'


# 实验定义 - 支持多个实验
experiments:
  # - name: "LSTM_NASA_IMS_debug"
  #   model: "LSTM"
  #   dataset: "NASA_IMS"
  #   training: "supervised_complete"
  #   evaluation: "default"
    
  # - name: "CNN_NASA_IMS_debug"
  #   model: "CNN"
  #   dataset: "NASA_IMS"
  #   training: "supervised_complete"
  #   evaluation: "default"

  # - name: "LSTM_NPY_UCI_HAR_baseline"
  #   model: "LSTM"
  #   dataset: "NPY_UCI_HAR"
  #   training: "supervised_complete"
  #   evaluation: "default"
    
  # - name: "CNN_NPY_UCI_HAR_baseline"
  #   model: "CNN"
  #   dataset: "NPY_UCI_HAR"
  #   training: "supervised_complete"
  #   evaluation: "default"

  # - name: "my_LSTM"
  #   model: "LSTM"
  #   dataset_collection: "MYDATA"
  #   training: "supervised_complete"
  #   evaluation: "default"

  # - name: "my_CNN"
  #   model: "CNN"
  #   dataset_collection: "MYDATA"
  #   training: "supervised_complete"
  #   evaluation: "default"

  - name: "Collection_test_LSTM"
    model: "LSTM"
    dataset_collection: "UCR2018_npy"
    training: "supervised_complete"
    evaluation: "default"

  - name: "Collection_test_CNN"
    model: "CNN"
    dataset_collection: "UCR2018_npy"
    training: "supervised_complete"
    evaluation: "default"


# Epoch信息打印配置模板
epochinfo_templates:
  nothing:
    format: 'default'  # 只显示基本的epoch信息（训练损失、验证损失）
  with_metrics:
    evaluation: 'default'  # 使用evaluation_templates中的default模板计算指标

# 评估配置模板
evaluation_templates:
  default:
    metrics:
      f1:
        # 默认：evaluators/f1.py 的 evaluate 函数
      precision:
        file: sklearn_metrics  # 使用 sklearn_metrics.py
        function: precision_evaluate  # 调用 precision_evaluate 函数
      recall:
        file: sklearn_metrics
        function: recall_evaluate
      accuracy:
        file: sklearn_metrics
        function: accuracy_evaluate
      train_test_gap:
        file: sklearn_metrics
        function: train_test_gap_evaluate
      test_samples:
        file: plot_label_distribution  # 使用 plot_label_distribution.py
        function: evaluate  # 会生成标签分布图
  # 训练期轻量模板：仅 accuracy（供 epochinfo 与 monitor 使用）
  train_acc:
    accuracy:
      file: sklearn_metrics
      function: accuracy_evaluate
      precision:
        file: sklearn_metrics  # 使用 sklearn_metrics.py
        function: precision_evaluate  # 调用 precision_evaluate 函数
      recall:
        file: sklearn_metrics
        function: recall_evaluate
      accuracy:
        file: sklearn_metrics
        function: accuracy_evaluate
      train_test_gap:
        file: sklearn_metrics
        function: train_test_gap_evaluate
      test_samples:
        file: plot_label_distribution  # 使用 plot_label_distribution.py
        function: evaluate  # 会生成标签分布图


# 输出配置 (当前仅支持控制台输出)
# output:
#   generate_plots: false    # 未实现
#   results_dir: ./results   # 未实现  
#   save_models: false       # 未实现
#   save_results: false      # 未实现
#   comparison_report: true  # 控制台输出，无文件保存
