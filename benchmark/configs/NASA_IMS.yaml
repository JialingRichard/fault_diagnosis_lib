# 全局设备设置
device: 'cuda'
# 实验配置信息
experiment_info:
  author: Benchmark Team
  date: '2025-09-24'
  description: 多模型多数据集对比实验框架
  version: '2.0'

# 数据集定义 - 支持多个数据集
datasets:
  NPY_UCI_HAR:
    train_data: ./data/NPY_UCI_HAR/train_X.npy
    train_label: ./data/NPY_UCI_HAR/train_y.npy
    test_data: ./data/NPY_UCI_HAR/test_X.npy
    test_label: ./data/NPY_UCI_HAR/test_y.npy
    preprocessing:
      normalize: true
      # fill_missing: true
      # remove_outliers: false
      # stride: 1
      # window_size: 10
  
  NASA_IMS:
    train_data: ./data/NASA_IMS/train_X.npy
    train_label: ./data/NASA_IMS/train_y.npy
    test_data: ./data/NASA_IMS/test_X.npy
    test_label: ./data/NASA_IMS/test_y.npy
    preprocessing:
      normalize: false  # NASA IMS数据已经是合理范围，不需要归一化

# 模型定义 - 支持多个模型
models:
  LSTM:
    # 纯模型架构参数
    hidden_dim: 64
    num_layers: 2
    dropout: 0.2
    # class: LSTM11  # 可选：如果类名和配置名不同，用此字段指定具体类名
  
  CNN:
    # CNN模型参数
    num_filters: 64
    filter_sizes: [3, 5, 7]
    num_layers: 3
    dropout: 0.2
  
  # GRU:
  #   hidden_dim: 128
  #   num_layers: 3
  #   dropout: 0.1

# 训练参数模板 - 支持多种训练方式
training_templates:
  supervised_default:
    type: supervised  # 监督学习训练
    batch_size: 64     # 恢复正常batch_size，验证器已修复OOM问题
    epochs: 100
    lr: 0.001
    patience: 10
    optimizer: 'adam'
    print_interval: 5  # 每10轮打印一次训练信息
    data_fraction: 1.0  # 使用100%的数据集（默认值）
    epochinfo: 'nothing'  # 显示训练和验证准确率
  
  supervised_fast:
    type: supervised
    batch_size: 128
    epochs: 10
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印（用于快速调试）
    data_fraction: 0.1  # 只使用10%的数据集，用于快速测试流程
    epochinfo: 'with_metrics'  # 使用集成评估指标的epoch信息打印格式
  
  supervised_debug:
    type: supervised
    batch_size: 64
    epochs: 3
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印
    data_fraction: 0.01  # 只使用1%的数据集，用于超快速调试
    epochinfo: 'nothing'  # 不显示额外的评估指标
  
  supervised_debug_with_metrics:
    type: supervised
    batch_size: 64
    epochs: 3
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印
    data_fraction: 0.01  # 只使用1%的数据集，用于超快速调试
    epochinfo: 'with_metrics'  # 显示训练过程中的评估指标和图片
  
  # self_supervised:
  #   type: self_supervised  # 自监督学习训练
  #   batch_size: 64
  #   epochs: 200
  #   lr: 0.0001
  #   mask_ratio: 0.15
  #   contrastive_temperature: 0.07
  #   optimizer: 'adam'
  
  # adversarial:
  #   type: adversarial  # 对抗训练
  #   batch_size: 128
  #   epochs: 150
  #   lr: 0.001
  #   adversarial_epsilon: 0.1
  #   attack_method: 'fgsm'
  #   optimizer: 'adam'

# 实验定义 - 支持多个实验
experiments:
  - name: "LSTM_NASA_IMS_debug"
    model: "LSTM"
    dataset: "NASA_IMS"
    training: "supervised_debug"
    evaluation: "default"
    
  # - name: "LSTM_NASA_IMS_baseline"
  #   model: "LSTM"
  #   dataset: "NASA_IMS"
  #   training: "supervised_fast"
  #   evaluation: "default"

  - name: "LSTM_NPY_UCI_HAR_baseline"
    model: "LSTM"
    dataset: "NPY_UCI_HAR"
    training: "supervised_default"
    evaluation: "default"
    
  - name: "CNN_NPY_UCI_HAR_baseline"
    model: "CNN"
    dataset: "NPY_UCI_HAR"
    training: "supervised_default"
    evaluation: "default"
    
  # - name: "LSTM_NASA_IMS_baseline"
  #   model: "LSTM"
  #   dataset: "NASA_IMS" 
  #   training: "supervised_default"
  #   evaluation: "default"
  #
  # - name: "GRU_NPY_UCI_HAR_baseline"
  #   model: "GRU"
  #   dataset: "NPY_UCI_HAR"
  #   training: "supervised_default"
  #   evaluation: "default"


# Epoch信息打印配置模板
epochinfo_templates:
  nothing:
    format: 'default'  # 只显示基本的epoch信息（训练损失、验证损失）
  with_metrics:
    evaluation: 'default'  # 使用evaluation_templates中的default模板计算指标

# 评估配置模板
evaluation_templates:
  default:
    metrics:
      f1:
        # 默认：evaluators/f1.py 的 evaluate 函数
      precision:
        file: sklearn_metrics  # 使用 sklearn_metrics.py
        function: precision_evaluate  # 调用 precision_evaluate 函数
      recall:
        file: sklearn_metrics
        function: recall_evaluate
      accuracy:
        file: sklearn_metrics
        function: accuracy_evaluate
      train_test_gap:
        file: sklearn_metrics
        function: train_test_gap_evaluate
      test_samples:
        file: plot_label_distribution  # 使用 plot_label_distribution.py
        function: evaluate  # 会生成标签分布图


# 输出配置 (当前仅支持控制台输出)
# output:
#   generate_plots: false    # 未实现
#   results_dir: ./results   # 未实现  
#   save_models: false       # 未实现
#   save_results: false      # 未实现
#   comparison_report: true  # 控制台输出，无文件保存
