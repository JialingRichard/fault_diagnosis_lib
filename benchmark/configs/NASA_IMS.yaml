# 全局设置（统一元信息与运行环境）
global:
  # 复现相关
  seed: 42                 # 全局随机种子（Python/NumPy/PyTorch）
  deterministic: false     # 设为 true 可获得更强确定性（可能降低性能）
  
  # 运行设备与ckpt策略
  device: 'cuda'           # 'cuda' 或 'cpu'
  checkpoint_policy: 'best'  # 'best' 仅保留最优；'all' 每个epoch都保存
  pre_test: false            # 训练前预检各实验的 monitor evaluator 可用性
  # 汇总/导出控制：按(模型+数据集)仅保留最优实验
  grid_only_best: true
  grid_best:
    metric: accuracy       # 依据的指标名（如 accuracy/f1）
    mode: max              # max 或 min
    split: test            # 统计来源：test 或 val（默认 test）
    # 强约束：用于 grid 精简的独立评估模板（需在 evaluation_templates 中定义）
    eval_template: default

  # 项目信息（原 experiment_info 扁平化）
  author: Benchmark Team
  date: '2025-09-24'
  description: 多模型多数据集对比实验框架
  version: '2.0'

# 数据集定义 - 支持多个数据集
datasets:
  NASA_IMS:
    train_data: ./data/NASA_IMS/train_X.npy
    train_label: ./data/NASA_IMS/train_y.npy
    test_data: ./data/NASA_IMS/test_X.npy
    test_label: ./data/NASA_IMS/test_y.npy
    preprocessing:
      normalize: false  

  NPY_UCI_HAR:
    train_data: ./data/NPY_UCI_HAR/train_X.npy
    train_label: ./data/NPY_UCI_HAR/train_y.npy
    test_data: ./data/NPY_UCI_HAR/test_X.npy
    test_label: ./data/NPY_UCI_HAR/test_y.npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}
        
        - name: "add_noise"
          file: "noise_processors"
          function: "add_gaussian_noise"
          params: 
            noise_level: 0.01
        
        - name: "remove_outliers"
          file: "noise_processors"
          function: "remove_outliers"
          params:
            threshold: 3.0
        
        - name: "feature_engineering"
          file: "feature_engineering"
          function: "add_statistical_features"
          params: {}
  


# 模型定义 - 支持多个模型
models:
  LSTM:
    module: models/LSTM    # 清晰的相对路径
    class: LSTM2one        # 使用分类模型
    hidden_dim: "{64, 128}"
    num_layers: "{2, 3}"
    dropout: 0.2

  CNN:
    module: models/CNN     # 清晰的相对路径
    class: CNN2one         # 使用分类模型
    num_filters: 64
    filter_sizes: "{[3, 5, 7], [3, 5], [3]}"
    num_layers: "{3, 2, 1}"
    dropout: 0.2

# 实验定义 - 支持多个实验
experiments:
  - name: "LSTM_NASA_IMS_debug"
    model: "LSTM"
    dataset: "NASA_IMS"
    training: "supervised_debug_with_metrics"
    evaluation: "default"
    summary:
      keep_only_best: true
      metric: accuracy   # 或 f1，根据需要调整
      mode: max          # max|min
      split: test        # test|val（val 将使用验证集评估结果）
    
  - name: "CNN_NASA_IMS_debug"
    model: "CNN"
    dataset: "NASA_IMS"
    training: "supervised_debug_with_metrics"
    evaluation: "default"
    summary:
      keep_only_best: true
      metric: accuracy
      mode: max
      split: test

  - name: "LSTM_NPY_UCI_HAR_baseline"
    model: "LSTM"
    dataset: "NPY_UCI_HAR"
    training: "supervised_debug_with_metrics"
    evaluation: "default"
    summary:
      keep_only_best: true
      metric: accuracy
      mode: max
      split: test
    
  - name: "CNN_NPY_UCI_HAR_baseline"
    model: "CNN"
    dataset: "NPY_UCI_HAR"
    training: "supervised_debug_with_metrics"
    evaluation: "default"
    summary:
      keep_only_best: true
      metric: accuracy
      mode: max
      split: test

# 训练参数模板 - 支持多种训练方式
training_templates:
  supervised_debug_with_metrics:
    type: supervised
    batch_size: 64
    epochs: 3
    lr: 0.001
    patience: 2
    optimizer: 'adam'
    print_interval: 1   # 每轮都打印
    data_fraction: 0.01  # 只使用1%的数据集，用于超快速调试
    # use_test_as_val: true  # 使用测试集作为验证集, 危险操作
    validation_split: 0.2  # 从训练集中划分20%作为验证集
    # 早停依据：true 按 monitor 指标早停；false/未设置 按 val_loss 早停
    early_stop_use_monitor: true
    # 训练期指标与可视化：使用轻量模板（仅accuracy）
    epochinfo: 'train_acc'
    # 训练期评估使用的数据划分（默认 val，避免信息泄露）
    # 最优ckpt监控：强制指定监控来源与规则
    # 监控模板隐含为上面的 epochinfo 指定模板
    monitor:
      metric: 'accuracy'        # 指标名（需在模板中已定义）
      mode: 'max'               # 'min' 或 'max'（需显式指定）
      split: 'val'             # 'val', 'test'（需显式指定）


# 评估配置模板
evaluation_templates:
  # 训练期轻量模板：仅accuracy（用于快速监控与best选择）
  train_acc:
    accuracy:
      file: sklearn_metrics
      function: accuracy_evaluate

  default:
    f1:
      # 默认：evaluators/f1.py 的 evaluate 函数
    precision:
      file: sklearn_metrics  # 使用 sklearn_metrics.py
      function: precision_evaluate  # 调用 precision_evaluate 函数
    recall:
      file: sklearn_metrics
      function: recall_evaluate
    accuracy:
      file: sklearn_metrics
      function: accuracy_evaluate
    train_test_gap:
      file: sklearn_metrics
      function: train_test_gap_evaluate
    test_samples:
      file: plot_label_distribution  # 使用 plot_label_distribution.py
      function: evaluate  # 会生成标签分布图
