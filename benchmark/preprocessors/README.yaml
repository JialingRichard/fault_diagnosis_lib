# 模块化预处理配置示例
# ========================

# 示例1: 简化配置格式
datasets:
  NPY_UCI_HAR:
    train_data: ./data/NPY_UCI_HAR/train_X.npy
    train_label: ./data/NPY_UCI_HAR/train_y.npy
    test_data: ./data/NPY_UCI_HAR/test_X.npy
    test_label: ./data/NPY_UCI_HAR/test_y.npy
    preprocessing:
      normalize: true          # 默认使用标准正态化
      # normalize: 'minmax'    # 也可以指定具体类型
      # normalize: 'robust'    # 鲁棒标准化
      # add_noise: true        # 添加高斯噪声
      # remove_outliers: true  # 移除异常值
      # smooth: true           # 数据平滑

# 示例2: 详细配置格式（步骤列表）
datasets:
  NASA_IMS:
    train_data: ./data/NASA_IMS/train_X.npy
    train_label: ./data/NASA_IMS/train_y.npy
    test_data: ./data/NASA_IMS/test_X.npy
    test_label: ./data/NASA_IMS/test_y.npy
    preprocessing:
      steps:
        - name: "normalize"
          file: "normalizers"
          function: "standard_normalize"
          params: {}
        
        - name: "add_noise"
          file: "noise_processors"
          function: "add_gaussian_noise"
          params: 
            noise_level: 0.01
        
        - name: "remove_outliers"
          file: "noise_processors"
          function: "remove_outliers"
          params:
            threshold: 3.0
        
        - name: "feature_engineering"
          file: "feature_engineering"
          function: "add_statistical_features"
          params: {}

# 可用的预处理器模块和函数：
# ===============================

# normalizers.py:
#   - minmax_normalize()      # MinMax标准化 (0-1)
#   - standard_normalize()    # 标准正态化 (Z-score)
#   - robust_normalize()      # 鲁棒标准化 (中位数+IQR)
#   - no_normalize()          # 不进行标准化

# noise_processors.py:
#   - add_gaussian_noise()    # 添加高斯噪声
#   - remove_outliers()       # 移除异常值
#   - smooth_data()           # 数据平滑

# feature_engineering.py:
#   - add_statistical_features()  # 添加统计特征
#   - sliding_window()           # 滑动窗口特征
#   - pca_transform()            # PCA降维
